Recoil 라이브러리 : 
- atom 원자 => 모든 하위 컴포넌트
- selector 함수 : state 값을 받아와서 해당 요소를 변환 후 반환 하는 함수!


* enum type : 열거할 수 있는 열거형 타입
enumberable: 열거할 수 있는
=> 어떤 순서를 갖고 있는 요소들의 타입을 정의!


 enum type

*Recoil
- useRecoilValue : atom값 가져올때
- useSetRecoilState : atom 값을 편집
- useRecoilState : atom 값을 가져와서 편집 

 > atom 값을 하위 컴포넌트 요소들이 사용!
(*반드시 매개변수로 객체를 사용 => key&default 필수값)

 > seletor 함수 역시 사용! 
=>(* atom에 저장되어있는 value값을 가져다가 변환,가공 => 반환)
=>(* 객체를 매개변수로 선언! => 해당 매개변수는 get함수를 가지고 있는 객체의 타입 => 객체 안에 담긴 get함수 : atom의 값을 반환 할 수 있도록 해주는 역할! / 반드시 return문을 활용해서 반환값 필수)

* react-hook-form 라이브러리

- form태그 > input태그에 입력된 값을 라벨링을 해서 찾아오거나, 값이 변경되고 있는 사항을 실시간 모니터링, 유효성 검사를 위해서 에러가 발생되었을때 해당 에러에 대응할 수 있는 메세지도 정의, 폼 요소안에 이벤트 핸들러 정의 해서 사용할 수도 있음

get : atom 값을 찾아와서 어떤 연산작업후 값을 반환!
set : state값을 특정 값을 변경시켜주고자 할 때!! / 두번째 매개변수로 들어오는 값이 신규state의 값이다

드래그&드롭 기능
npm react beautiful dnd

가장 바깥영역은 반드시 <DragDropContext/>
실제 드래그가 가능하게 할 수 있도록 해주는 영역 설정 <Droppable/>
<Droppable/> 이 있어야지만 , <Draggable/> 가능

1) <Droppable/> & <Draggable/>
: 반드시 본인들만의 고유한 ID값을 가지고 있어야함

2) <Droppable/> & <Draggable/>
: 자식요소 태그들은 함수의 반환값 형태가 되어야함

3) <Draggable/>
: id값 + index값도 필요하다!!

4) <Draggable/> 드래그 종료가 되는 시점 함수 도출
=> onDragEnd 함수 (*이동한 지점의 정보값을 알려주는 역할)
=> 

*stack : 아주 단순한 규칙을 가지고 있는 기능
=> 특징 : 먼저들어간 데이터가 반드시 나중에 나옴
=> 설거지 : 가장먼저 퐁퐁으로 닦은 접시 가장 밑에 놓는다 => 그 다음 접시 + 접시 +접시 하나씩 헹굼 

1. 사용자가 input 태그를 활용해서 text를 입력한다
2. 입력한 text + 해당 text가 작성한 날짜 + text만의 고유 id가 하나의 세트화된 데이터가 필요하다
3. 세트화된 데이터를 담을 수 있는 자료형태
4. 이 데이터는 어디서든 (*어떤 컴포넌트 든지 간에 ) 받아올 수 있도록 처리해야 한다
=> recoil 사용

*MockUp Data => 
* 배열안에서 특정요소를 찾아서 인덱스 위치값을 바꿔주는 역할을 활용할수은 메서드함수!
* 전개연산자 구문 활용: 기존 배열에서 새로운값을 추가하고, 기존값을 제거하는 역하